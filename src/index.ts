import { app, BrowserWindow, ipcMain } from 'electron';
import { RuleTester } from 'eslint';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import * as mysql from 'mysql';
import { resourceLimits } from 'worker_threads';

let connection: mysql.Connection;
// Triggered in response to SQL database credentials submission.
ipcMain.handle('dbLogin', (event: Event, username: string, password: string) => {
  connection = mysql.createConnection({
    host: 'localhost',
    user: username,
    password: password
  });

  let getConnectionStatus = function (callback: Function) {
    connection.query('USE `mobile-devices`', (err) => {
      if (err) {
        console.error(err);
        callback(false);
        return;
      }
      callback(true);
    });
  };

  let connectionStatus = new Promise((resolve: Function, reject: Function) => {
    getConnectionStatus(function (result: boolean) {
      console.log(result ? 'Database connection status: connected' : 'Database connection status: disconnected');
      resolve(result);
    });
  });
  return connectionStatus;
});

// Triggered in response to SQL-database connection termination-request.
ipcMain.handle('dbLogout', (event: Event) => {
  return connection.end((err) => {
    console.log(err?err : "Connection closed");
  });
});